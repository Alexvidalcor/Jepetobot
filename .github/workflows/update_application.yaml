name: Update application

on:
  push:
    branches:
      - "master"
      - "dev"
  workflow_dispatch:
  workflow_call:
    secrets:
      AWS_REGION:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  cdk-update-application:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      APP_NAME: ${{ secrets.APP_NAME }}
      ENVIRONMENT_DEPLOY: ${{ github.ref_name }}
      
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4.1.4
      with:
        fetch-depth: 0

    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: ${{ secrets.APP_NAME }}
          
    - name: Show Github actions custom variables
      run: |
        echo "Environment chosen: ${{ github.ref_name }}"
    
    - name: "Check latest tag"
      id: latest-tag
      run: |
      
        echo "latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)" >> $GITHUB_OUTPUT
        export latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)

        echo "Environment deploy: ${ENVIRONMENT_DEPLOY}"
        echo "App version: ${latest_tag}-${GITHUB_RUN_NUMBER}"
        
        last_line=$(tail -1 ./src/env/app_public_env.py)
        if [[ $last_line == appVersion* ]]; then
          sed -i '$ d' ./src/env/app_public_env.py
          echo "appVersion = \"${ENVIRONMENT_DEPLOY}-${latest_tag}-${GITHUB_RUN_NUMBER}\"" >> ./src/env/app_public_env.py
        fi

    - name: Compress Repository
      run: |
        echo "${VERSION_NUMBER}"
        zip -r ${APP_NAME}-${ENVIRONMENT_DEPLOY}_${{ steps.latest-tag.outputs.latest_tag }}-${GITHUB_RUN_NUMBER}.zip . -x './*.git*' './cdk/*' './.devcontainer/*'

    - name: Upload compressed file to S3
      id: tasks-s3
      run: |

        echo BUCKETNAME=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'jepetobot-${ENVIRONMENT_DEPLOY}')].Name" --output text) >> $GITHUB_OUTPUT
        export BUCKETNAME=$(aws s3api list-buckets --query "Buckets[?contains(Name, 'jepetobot-${ENVIRONMENT_DEPLOY}')].Name" --output text)

        aws s3 cp ${APP_NAME}-${ENVIRONMENT_DEPLOY}_${{ steps.latest-tag.outputs.latest_tag }}-${GITHUB_RUN_NUMBER}.zip s3://$BUCKETNAME/ --region $AWS_REGION &> /dev/null

    - name: Codedeploy execution
      run: |

        set +x

        export DEPLOYMENT_ID=$(aws deploy create-deployment --application-name "${APP_NAME}-${ENVIRONMENT_DEPLOY}_app-codedeploy" --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name "${APP_NAME}-${ENVIRONMENT_DEPLOY}_group-codedeploy" --s3-location bucket=${{ steps.tasks-s3.outputs.BUCKETNAME }},bundleType=zip,key=${APP_NAME}-${ENVIRONMENT_DEPLOY}_${{ steps.latest-tag.outputs.latest_tag }}-${GITHUB_RUN_NUMBER}.zip --query deploymentId --output text)

        timeout 900s bash -c '
        while [ "$(aws deploy get-deployment --deployment-id $DEPLOYMENT_ID --query deploymentInfo.status --output text)" != "Succeeded" ]; do
          sleep 30
        done
        '
